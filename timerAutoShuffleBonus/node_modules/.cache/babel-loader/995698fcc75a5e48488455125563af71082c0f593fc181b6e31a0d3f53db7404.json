{"ast":null,"code":"var _jsxFileName = \"/Users/derrickmarques/Downloads/react-card-effects-solution/timerAutoShuffleBonus/src/Deck.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Card from \"./Card\";\nimport axios from \"axios\";\nimport \"./Deck.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck\";\n\n/** Deck: uses deck API, allows drawing card at a time. */\n\nfunction Deck() {\n  _s();\n  const [deck, setDeck] = useState(null);\n  const [drawn, setDrawn] = useState([]);\n\n  // these are toggled to true to begin events\n  const [isShuffling, setIsShuffling] = useState(false);\n  const [isDrawing, setIsDrawing] = useState(false);\n\n  // ref to the timer ID so we can stop it on unmount\n  const timerRef = useRef(null);\n  useEffect(function loadDeckFromAPI() {\n    async function fetchData() {\n      let d = await axios.get(\"\".concat(API_BASE_URL, \"/new/shuffle/\"));\n      setDeck(d.data);\n    }\n    fetchData();\n  }, [setDeck]);\n  useEffect(function drawCardAddToDrawn() {\n    async function fetchCard() {\n      try {\n        let drawRes = await axios.get(\"\".concat(API_BASE_URL, \"/\").concat(deck.deck_id, \"/draw/\"));\n        if (drawRes.data.remaining === 0) throw new Error(\"Deck empty!\");\n        const card = drawRes.data.cards[0];\n        setDrawn(d => [...d, {\n          id: card.code,\n          name: card.suit + \" \" + card.value,\n          image: card.image\n        }]);\n      } catch (err) {\n        setIsDrawing(false);\n        alert(err);\n      }\n    }\n    if (isDrawing && !timerRef.current) {\n      timerRef.current = setInterval(fetchCard, 1000);\n    } else if (!isDrawing && timerRef.current) {\n      stopDrawingCards();\n    }\n    function stopDrawingCards() {\n      if (timerRef.current) clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n    return stopDrawingCards;\n  }, [isDrawing, deck]);\n  useEffect(function shuffleDeckViaAPI() {\n    async function shuffleDeck(deck) {\n      try {\n        await axios.get(\"\".concat(API_BASE_URL, \"/\").concat(deck.deck_id, \"/shuffle/\"));\n        setDrawn([]);\n        setIsDrawing(false);\n        setIsShuffling(false);\n      } catch (err) {\n        alert(err);\n      }\n    }\n    if (isShuffling && deck) shuffleDeck(deck);\n  }, [isShuffling, deck]);\n\n  /** Draw card: change the state & effect will kick in. */\n  function toggleDraw() {\n    setIsDrawing(auto => !auto);\n  }\n\n  /** Shuffle: change the state & effect will kick in. */\n  function startShuffling() {\n    return setIsShuffling(true);\n  }\n\n  /** Return draw button (disabled if shuffling) */\n  function renderDrawBtnIfOk() {\n    if (!deck) return null;\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Deck-gimme\",\n      onClick: toggleDraw,\n      disabled: isShuffling,\n      children: [isDrawing ? \"STOP \" : \"KEEP \", \" DRAWING FOR ME\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this);\n  }\n\n  /** Return shuffle button (disabled if already is) */\n  function renderShuffleBtnIfOk() {\n    if (!deck) return null;\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"Deck-gimme\",\n      onClick: startShuffling,\n      disabled: isShuffling,\n      children: \"SHUFFLE DECK\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"Deck\",\n    children: [renderDrawBtnIfOk(), renderShuffleBtnIfOk(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Deck-cardarea\",\n      children: drawn.map(c => /*#__PURE__*/_jsxDEV(Card, {\n        name: c.name,\n        image: c.image\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 7\n  }, this);\n}\n_s(Deck, \"/R1jiDwFOG7rdEayFd14fauP5Os=\");\n_c = Deck;\nexport default Deck;\nvar _c;\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Card","axios","jsxDEV","_jsxDEV","API_BASE_URL","Deck","_s","deck","setDeck","drawn","setDrawn","isShuffling","setIsShuffling","isDrawing","setIsDrawing","timerRef","loadDeckFromAPI","fetchData","d","get","concat","data","drawCardAddToDrawn","fetchCard","drawRes","deck_id","remaining","Error","card","cards","id","code","name","suit","value","image","err","alert","current","setInterval","stopDrawingCards","clearInterval","shuffleDeckViaAPI","shuffleDeck","toggleDraw","auto","startShuffling","renderDrawBtnIfOk","className","onClick","disabled","children","fileName","_jsxFileName","lineNumber","columnNumber","renderShuffleBtnIfOk","map","c","_c","$RefreshReg$"],"sources":["/Users/derrickmarques/Downloads/react-card-effects-solution/timerAutoShuffleBonus/src/Deck.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Card from \"./Card\";\nimport axios from \"axios\";\nimport \"./Deck.css\";\n\nconst API_BASE_URL = \"https://deckofcardsapi.com/api/deck\";\n\n/** Deck: uses deck API, allows drawing card at a time. */\n\nfunction Deck() {\n  const [deck, setDeck] = useState(null);\n  const [drawn, setDrawn] = useState([]);\n\n  // these are toggled to true to begin events\n  const [isShuffling, setIsShuffling] = useState(false);\n  const [isDrawing, setIsDrawing] = useState(false);\n\n  // ref to the timer ID so we can stop it on unmount\n  const timerRef = useRef(null);\n\n\n  useEffect(function loadDeckFromAPI() {\n    async function fetchData() {\n      let d = await axios.get(`${API_BASE_URL}/new/shuffle/`);\n      setDeck(d.data);\n    }\n    fetchData();\n  }, [setDeck]);\n\n\n  useEffect(function drawCardAddToDrawn() {\n    async function fetchCard() {\n      try {\n        let drawRes = await axios.get(`${API_BASE_URL}/${deck.deck_id}/draw/`);\n\n        if (drawRes.data.remaining === 0) throw new Error(\"Deck empty!\");\n\n        const card = drawRes.data.cards[0];\n\n        setDrawn(d => [\n          ...d,\n          {\n            id: card.code,\n            name: card.suit + \" \" + card.value,\n            image: card.image,\n          },\n        ]);\n      } catch (err) {\n        setIsDrawing(false);\n        alert(err);\n      }\n    }\n\n    if (isDrawing && !timerRef.current) {\n      timerRef.current = setInterval(fetchCard, 1000);\n    } else if (!isDrawing && timerRef.current) {\n      stopDrawingCards()\n    }\n\n    function stopDrawingCards() {\n      if (timerRef.current) clearInterval(timerRef.current);\n      timerRef.current = null;\n    }\n\n    return stopDrawingCards\n  }, [isDrawing, deck]);\n\n\n  useEffect(function shuffleDeckViaAPI() {\n    async function shuffleDeck(deck) {\n      try {\n        await axios.get(`${API_BASE_URL}/${deck.deck_id}/shuffle/`);\n        setDrawn([]);\n        setIsDrawing(false);\n        setIsShuffling(false);\n      } catch (err) {\n        alert(err);\n      }\n    }\n\n    if (isShuffling && deck) shuffleDeck(deck);\n  }, [isShuffling, deck]);\n\n\n  /** Draw card: change the state & effect will kick in. */\n  function toggleDraw() {\n    setIsDrawing(auto => !auto);\n  }\n\n  /** Shuffle: change the state & effect will kick in. */\n  function startShuffling() {\n    return setIsShuffling(true);\n  }\n\n  /** Return draw button (disabled if shuffling) */\n  function renderDrawBtnIfOk() {\n    if (!deck) return null;\n\n    return (\n        <button\n            className=\"Deck-gimme\"\n            onClick={toggleDraw}\n            disabled={isShuffling}>\n          {isDrawing ? \"STOP \" : \"KEEP \"} DRAWING FOR ME\n        </button>\n    );\n  }\n\n  /** Return shuffle button (disabled if already is) */\n  function renderShuffleBtnIfOk() {\n    if (!deck) return null;\n    return (\n        <button\n            className=\"Deck-gimme\"\n            onClick={startShuffling}\n            disabled={isShuffling}>\n          SHUFFLE DECK\n        </button>\n    );\n  }\n\n  return (\n      <main className=\"Deck\">\n\n        { renderDrawBtnIfOk() }\n        { renderShuffleBtnIfOk() }\n\n        <div className=\"Deck-cardarea\">{\n          drawn.map(c => (\n              <Card key={c.id} name={c.name} image={c.image} />\n          ))}\n        </div>\n\n      </main>\n  );\n}\n\nexport default Deck;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}